name: Release and Version

on:
  push:
    branches: [ main, master ]
    paths:
      - 'vdoninja-sdk.js'
      - 'package.json'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      publish_npm:
        description: 'Publish to NPM'
        required: true
        default: true
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  # First, run all tests
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
        webrtc-lib: ['@roamhq/wrtc']
    
    name: Test Node ${{ matrix.node-version }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install dependencies
      run: |
        npm install
        npm install ${{ matrix.webrtc-lib }}
    
    - name: Run tests
      run: npm test
      
  version:
    needs: test  # Only run if tests pass
    runs-on: ubuntu-latest
    # Skip if the commit message contains [skip ci] or was made by the bot
    if: |
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !contains(github.event.head_commit.message, 'chore: bump version')
    
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Configure Git
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"
        
    - name: Determine version bump
      id: version_type
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION_TYPE="${{ inputs.version_type }}"
        else
          # Auto-detect version type based on commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ "$COMMIT_MSG" == *"BREAKING CHANGE"* ]] || [[ "$COMMIT_MSG" == *"!"* ]]; then
            VERSION_TYPE="major"
          elif [[ "$COMMIT_MSG" == *"feat"* ]]; then
            VERSION_TYPE="minor"
          else
            VERSION_TYPE="patch"
          fi
        fi
        echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
        
    - name: Bump version
      id: version
      run: |
        npm version ${{ steps.version_type.outputs.version_type }} --no-git-tag-version
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
    - name: Update SDK version in file
      run: |
        # Update header comment
        sed -i "1s/.*/\/\/ VDO.Ninja SDK v${{ steps.version.outputs.new_version }}/" vdoninja-sdk.js
        
        # Update static VERSION getter
        sed -i "s/return '[0-9]\+\.[0-9]\+\.[0-9]\+';/return '${{ steps.version.outputs.new_version }}';/" vdoninja-sdk.js
        
    - name: Install dependencies
      run: npm install
      
    - name: Build minified version
      run: npm run build
      
    - name: Commit version bump
      run: |
        git add package.json package-lock.json vdoninja-sdk.js vdoninja-sdk.min.js
        git commit -m "chore: bump version to v${{ steps.version.outputs.new_version }} [skip ci]"
        git push
        
    - name: Create Git Tag
      run: |
        git tag v${{ steps.version.outputs.new_version }}
        git push origin v${{ steps.version.outputs.new_version }}

  publish-npm:
    needs: version
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && inputs.publish_npm) ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: main  # Get the latest with version bump
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm install
      
    - name: Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
  create-release:
    needs: [version, publish-npm]
    if: always() && needs.version.result == 'success'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: main  # Get the latest with version bump
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.version.outputs.new_version }}
        name: Release v${{ needs.version.outputs.new_version }}
        body: |
          ## VDO.Ninja SDK v${{ needs.version.outputs.new_version }}
          
          ### Installation
          
          NPM:
          ```bash
          npm install @vdoninja/sdk@${{ needs.version.outputs.new_version }}
          ```
          
          CDN:
          ```html
          <!-- From NPM CDN -->
          <script src="https://unpkg.com/@vdoninja/sdk@${{ needs.version.outputs.new_version }}/vdoninja-sdk.min.js"></script>
          
          <!-- From GitHub CDN -->
          <script src="https://cdn.jsdelivr.net/gh/steveseguin/ninjasdk@v${{ needs.version.outputs.new_version }}/vdoninja-sdk.min.js"></script>
          ```
          
          ### What's Changed
          See [commit history](https://github.com/steveseguin/ninjasdk/compare/v${{ needs.version.outputs.new_version }}...HEAD) for details.
          
        files: |
          vdoninja-sdk.js
          vdoninja-sdk.min.js
          vdoninja-sdk-node.js
          webrtc-adapter.js
          package.json
          README.md
        draft: false
        prerelease: false